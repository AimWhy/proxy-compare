{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["// symbols\nconst OWN_KEYS_SYMBOL = Symbol();\nconst TRACK_MEMO_SYMBOL = Symbol();\nconst GET_ORIGINAL_SYMBOL = Symbol();\n\n// properties\nconst TRACK_OBJECT_PROPERTY = 't';\nconst AFFECTED_PROPERTY = 'a';\nconst RECORD_USAGE_PROPERTY = 'r';\nconst RECORD_OBJECT_AS_USED_PROPERTY = 'u';\nconst ORIGINAL_OBJECT_PROPERTY = 'o';\nconst PROXY_PROPERTY = 'p';\nconst PROXY_CACHE_PROPERTY = 'c';\nconst NEXT_OBJECT_PROPERTY = 'n';\nconst CHANGED_PROPERTY = 'g';\n\n// check if obj is a plain object or an array\nconst isPlainObject = <T>(obj: T): obj is T extends object ? T : never => {\n  try {\n    const proto = Object.getPrototypeOf(obj);\n    return proto === Object.prototype || proto === Array.prototype;\n  } catch (e) {\n    return false;\n  }\n};\n\n// copy obj if frozen\nconst unfreeze = (obj: object) => {\n  if (!Object.isFrozen(obj)) return obj;\n  if (Array.isArray(obj)) {\n    return Array.from(obj);\n  }\n  return Object.assign({}, obj);\n};\n\ntype Affected = WeakMap<object, Set<string | number | symbol>>;\ntype ProxyCache<T extends object> = WeakMap<object, ProxyHandler<T>>;\ntype ProxyHandler<T extends object> = {\n  [PROXY_PROPERTY]: T;\n  [PROXY_CACHE_PROPERTY]?: ProxyCache<object>;\n  [AFFECTED_PROPERTY]: Affected;\n  [TRACK_OBJECT_PROPERTY]: boolean;\n  [ORIGINAL_OBJECT_PROPERTY]: T;\n  [RECORD_USAGE_PROPERTY](key: string | number | symbol): void;\n  [RECORD_OBJECT_AS_USED_PROPERTY](): void;\n  get(target: T, key: string | number | symbol): unknown;\n  has(target: T, key: string | number | symbol): boolean;\n  ownKeys(target: T): (string | number | symbol)[];\n};\n\nconst createProxyHandler = <T extends object>() => {\n  const handler: ProxyHandler<T> = {\n    [RECORD_USAGE_PROPERTY](key) {\n      if (this[TRACK_OBJECT_PROPERTY]) return;\n      let used = this[AFFECTED_PROPERTY].get(this[ORIGINAL_OBJECT_PROPERTY]);\n      if (!used) {\n        used = new Set();\n        this[AFFECTED_PROPERTY].set(this[ORIGINAL_OBJECT_PROPERTY], used);\n      }\n      used.add(key);\n    },\n    [RECORD_OBJECT_AS_USED_PROPERTY]() {\n      this[TRACK_OBJECT_PROPERTY] = true;\n      this[AFFECTED_PROPERTY].delete(this[ORIGINAL_OBJECT_PROPERTY]);\n    },\n    get(target, key) {\n      if (key === GET_ORIGINAL_SYMBOL) {\n        return this[ORIGINAL_OBJECT_PROPERTY];\n      }\n      this[RECORD_USAGE_PROPERTY](key);\n      return createDeepProxy(\n        (target as any)[key],\n        this[AFFECTED_PROPERTY],\n        this[PROXY_CACHE_PROPERTY],\n      );\n    },\n    has(target, key) {\n      if (key === TRACK_MEMO_SYMBOL) {\n        this[RECORD_OBJECT_AS_USED_PROPERTY]();\n        return true;\n      }\n      // LIMITATION:\n      // We simply record the same as get.\n      // This means { a: {} } and { a: {} } is detected as changed,\n      // if 'a' in obj is handled.\n      this[RECORD_USAGE_PROPERTY](key);\n      return key in target;\n    },\n    ownKeys(target) {\n      this[RECORD_USAGE_PROPERTY](OWN_KEYS_SYMBOL);\n      return Reflect.ownKeys(target);\n    },\n  } as ProxyHandler<T>; // XXX wrong assertion, better way?\n  return handler;\n};\n\n/**\n * create a proxy\n *\n * It will recursively create a proxy upon access.\n *\n * @example\n * import { createDeepProxy } from 'proxy-compare';\n *\n * const obj = ...;\n * const affected = new WeakMap();\n * const proxy = createDeepProxy(obj, affected);\n */\nexport const createDeepProxy = <T>(\n  obj: T,\n  affected: WeakMap<object, unknown>,\n  proxyCache?: WeakMap<object, unknown>,\n): T => {\n  if (!isPlainObject(obj)) return obj;\n  const origObj = (\n    obj as { [GET_ORIGINAL_SYMBOL]?: typeof obj }\n  )[GET_ORIGINAL_SYMBOL]; // unwrap proxy\n  const target = origObj || obj;\n  let proxyHandler: ProxyHandler<typeof target> | undefined = (\n    proxyCache && (proxyCache as ProxyCache<typeof target>).get(target)\n  );\n  if (!proxyHandler) {\n    proxyHandler = createProxyHandler<T extends object ? T : never>();\n    proxyHandler[PROXY_PROPERTY] = new Proxy(unfreeze(target), proxyHandler) as typeof target;\n    proxyHandler[ORIGINAL_OBJECT_PROPERTY] = target;\n    proxyHandler[TRACK_OBJECT_PROPERTY] = false; // for trackMemo\n    if (proxyCache) {\n      proxyCache.set(target, proxyHandler);\n    }\n  }\n  proxyHandler[AFFECTED_PROPERTY] = affected as Affected;\n  proxyHandler[PROXY_CACHE_PROPERTY] = proxyCache as ProxyCache<object>;\n  return proxyHandler[PROXY_PROPERTY];\n};\n\nconst isOwnKeysChanged = (origObj: object, nextObj: object) => {\n  const origKeys = Reflect.ownKeys(origObj);\n  const nextKeys = Reflect.ownKeys(nextObj);\n  return origKeys.length !== nextKeys.length\n    || origKeys.some((k, i) => k !== nextKeys[i]);\n};\n\nexport const MODE_ASSUME_UNCHANGED_IF_UNAFFECTED = /*   */ 0b00001;\nexport const MODE_IGNORE_REF_EQUALITY = /*              */ 0b00010;\n\nconst IN_DEEP_SHIFT = 2;\nexport const MODE_ASSUME_UNCHANGED_IF_UNAFFECTED_IN_DEEP = (\n  MODE_ASSUME_UNCHANGED_IF_UNAFFECTED << IN_DEEP_SHIFT\n);\nexport const MODE_IGNORE_REF_EQUALITY_IN_DEEP = (\n  MODE_IGNORE_REF_EQUALITY << IN_DEEP_SHIFT\n);\n\ntype DeepChangedCache = WeakMap<object, {\n  [NEXT_OBJECT_PROPERTY]: object;\n  [CHANGED_PROPERTY]: boolean;\n}>;\n\n/**\n * compare two object\n *\n * It will compare only with affected object properties\n *\n * @example\n * import { isDeepChanged } from 'proxy-compare';\n *\n * const objToCompare = ...;\n * const changed = isDeepChanged(obj, objToCompare, affected);\n */\nexport const isDeepChanged = (\n  origObj: unknown,\n  nextObj: unknown,\n  affected: WeakMap<object, unknown>,\n  cache?: WeakMap<object, unknown>,\n  mode = 0,\n): boolean => {\n  if (origObj === nextObj && (mode & MODE_IGNORE_REF_EQUALITY) === 0) return false;\n  if (typeof origObj !== 'object' || origObj === null) return true;\n  if (typeof nextObj !== 'object' || nextObj === null) return true;\n  const used = (affected as Affected).get(origObj);\n  if (!used) return (mode & MODE_ASSUME_UNCHANGED_IF_UNAFFECTED) === 0;\n  if (cache && (mode & MODE_IGNORE_REF_EQUALITY) === 0) {\n    const hit = (cache as DeepChangedCache).get(origObj);\n    if (hit && hit[NEXT_OBJECT_PROPERTY] === nextObj) {\n      return hit[CHANGED_PROPERTY];\n    }\n    // for object with cycles\n    (cache as DeepChangedCache).set(origObj, {\n      [NEXT_OBJECT_PROPERTY]: nextObj,\n      [CHANGED_PROPERTY]: false,\n    });\n  }\n  let changed: boolean | null = null;\n  // eslint-disable-next-line no-restricted-syntax\n  for (const key of used) {\n    const c = key === OWN_KEYS_SYMBOL ? isOwnKeysChanged(origObj, nextObj)\n      : isDeepChanged(\n        (origObj as any)[key],\n        (nextObj as any)[key],\n        affected,\n        cache,\n        ((mode >>> IN_DEEP_SHIFT) << IN_DEEP_SHIFT) | (mode >>> IN_DEEP_SHIFT),\n      );\n    if (c === true || c === false) changed = c;\n    if (changed) break;\n  }\n  if (changed === null) changed = (mode & MODE_ASSUME_UNCHANGED_IF_UNAFFECTED) === 0;\n  if (cache && (mode & MODE_IGNORE_REF_EQUALITY) === 0) {\n    cache.set(origObj, {\n      [NEXT_OBJECT_PROPERTY]: nextObj,\n      [CHANGED_PROPERTY]: changed,\n    });\n  }\n  return changed;\n};\n\n// explicitly track object with memo\nexport const trackMemo = (obj: unknown) => {\n  if (isPlainObject(obj)) {\n    return TRACK_MEMO_SYMBOL in obj;\n  }\n  return false;\n};\n\n// get original object from proxy\nexport const getUntrackedObject = <T>(obj: T): T | null => {\n  if (isPlainObject(obj)) {\n    return (obj as { [GET_ORIGINAL_SYMBOL]?: T })[GET_ORIGINAL_SYMBOL] || null;\n  }\n  return null;\n};\n"],"names":["OWN_KEYS_SYMBOL","Symbol","TRACK_MEMO_SYMBOL","GET_ORIGINAL_SYMBOL","isPlainObject","obj","proto","Object","getPrototypeOf","prototype","Array","e","createDeepProxy","affected","proxyCache","target","proxyHandler","get","key","this","used","Set","set","add","has","ownKeys","Reflect","Proxy","isFrozen","isArray","from","assign","unfreeze","isOwnKeysChanged","origObj","nextObj","origKeys","nextKeys","length","some","k","i","MODE_ASSUME_UNCHANGED_IF_UNAFFECTED","MODE_IGNORE_REF_EQUALITY","isDeepChanged","cache","mode","hit","changed","c"],"mappings":"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"}